/*
In last weekâ€™s lab you provided formatting instructions for printing books in the
Inventory class. The task of formatting the printed representation of a book, really
should be the responsibility of the Book class itself. You will use operator overloading
to accomplish this.

Your Tasks
    Task 3:
        In main(), in your InventoryTester.cpp file, attempt to add these additional books to
        your inventory:

            "0134444329", "Tony Gaddis", "Starting Out With Python", 4, "PE", 99.95

            "0133582736", "Tony Gaddis", "Starting Out With Python", 3, "PE", 19.95

            "013478796X", "Tony Gaddis", 
            "Starting Out With Java: From Control Structures through Data Structures", 4, "PE", 145.38

            "1119056553", "Cay Horstmann", "Python for Everyone", 2, "WI", 98.38

            "0134802217", "Tony Gaddis", 
            "Starting Out With Java: From Control Structures through Objects", 7, "PE", 188.95

            "0134462017", "Tony Gaddis", 
            "Starting Out With Java: Early Objects", 6, "PE", 58.50

        If an addBook() attempt fails, print a message identifying which book failed (by title or
        ISBN number).
        One or more of these new books will fail to add to the inventory, causing addBook() to
        return false. Your inventoryTester program must check the return status of each call to
        addBook().


Specifications:
    The output generated by the operator<< overload should contain only the information 
    for the book, without headers, on one line without any newline characters.
    Author names and book titles must be formatted to a consistent number of characters
    such that they align in even columns when multiple books are printed. This formatting
    must not be done by adding extraneous space characters to the field values.
    Dollar amounts must be formatted with two digits to the right of the decimal, right
    justified, such that the book prices align in an even column when multiple books are
    printed.

    Your program includes appropriate comments for documentation, uses meaningful
    names, prompts, and messages, and follows the naming conventions.
    Your program must include all features from the previous labs that used the Book class.
    The program must correctly add only a single copy of each book: if two entries have the
    same ISBN number, only one shall be added to the inventory.
    The program must not crash if more than ten books are added to the inventory.
    Example output is shown below. Your exact formatting may be different, but all
    information must be clear, present, and understandable, with aligned columns.


Finishing Up:
    When you have finished, there are up to five (5) files to submit for this assignment:
        - if you chose to declare and define your classes in one header file each, 
        then you only need to submit three (3) files with the following names...
            - Book.h
            - Inventory.h
            - InventoryTester.cpp

        - if you chose to declare your classes in a header file and define them within a .cpp
        file, then you need to submit five (5) files in total with the following names...
            - Book.h
            - BookDef.cpp
            - Inventory.h
            - InventoryDef.cpp
            - InventoryTester.cpp

*/